{"version":3,"sources":["components/Button.js","components/StyledDiv.js","components/Textarea.js","styles/index.css.js","helpers/transform.js","components/Transformer.js","App.js","serviceWorker.js","index.js"],"names":["StyledButton","styled","button","props","css","toJS","Button","type","className","disabled","loading","aria-disabled","onClick","onMouseEnter","onMouseLeave","onMouseDown","onMouseOut","onMouseOver","onMouseUp","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","children","defaultProps","StyledDiv","div","Textarea","state","value","UNSAFE_componentWillReceiveProps","nextProps","setState","handleChange","event","persist","target","changeCallback","name","handleFocus","focusCallback","handleBlur","blurCallback","this","label","height","readOnly","placeholder","heightStyle","onFocus","onChange","onBlur","style","Component","wrapperStyles","width","display","alignItems","textareaStyles","flex","margin","textarea","boxSizing","resize","buttonStyles","maxHeight","minWidth","cleanPropertyName","replace","v","toUpperCase","mediaNameGenerator","nameGenerator","transform","inputCssText","Error","bootstrapWithCssClass","indexOf","result","transformRules","self","rules","forEach","rule","obj","media","declarations","declaration","cleanProperty","property","selectors","selector","trim","cssParser","parse","stylesheet","Transformer","scss","styles","handleChanges","transformStyles","ugly","pretty","JSON","stringify","undefined","match","m1","console","log","render","App","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a58b328d.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst StyledButton = styled.button`\n  ${props => typeof props.css.toJS === 'function' ? props.css.toJS() : props.css}\n`\n\nconst Button = props => (\n  <StyledButton\n    type={props.type}\n    className={props.className}\n    css={props.css}\n    disabled={props.disabled || props.loading}\n    aria-disabled={props.disabled || props.loading}\n    onClick={props.onClick}\n    onMouseEnter={props.onMouseEnter}\n    onMouseLeave={props.onMouseLeave}\n    onMouseDown={props.onMouseDown}\n    onMouseOut={props.onMouseOut}\n    onMouseOver={props.onMouseOver}\n    onMouseUp={props.onMouseUp}\n    onTouchCancel={props.onTouchCancel}\n    onTouchEnd={props.onTouchEnd}\n    onTouchMove={props.onTouchMove}\n    onTouchStart={props.onTouchStart}\n  >\n    <em>{props.children}</em>\n  </StyledButton>\n)\n\nButton.defaultProps = {\n  type: 'button'\n}\n\nButton.propTypes = {}\n\nexport default Button\n","import styled from 'styled-components'\n\nexport const StyledDiv = styled.div`\n  ${props => typeof props.css.toJS === 'function' ? props.css.toJS() : props.css}\n`\n\nStyledDiv.defaultProps = {\n  css: {}\n}\n\nexport default StyledDiv\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport StyledDiv from './StyledDiv'\n\nclass Textarea extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  state = {\n    value: this.props.value\n  }\n\n  static defaultProps = {\n    disabled: false,\n    value: ''\n  }\n\n  static propTypes = {\n    /**\n     * A class name to be used for local styles or integrations (required to support styled-components)\n     */\n    className: PropTypes.string,\n    /**\n     * Name of the textarea.\n     */\n    name: PropTypes.string,\n    /**\n     * Whether the textarea is disabled.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Whether the textarea is read only.\n     */\n    readOnly: PropTypes.bool,\n    /**\n     * Text shown above the textarea.\n     */\n    label: PropTypes.string,\n    /**\n     * Value of the textarea.\n     */\n    value: PropTypes.string,\n    /**\n     * Optional placeholder text.\n     */\n    placeholder: PropTypes.string,\n    /**\n     * Optional styles to add to the textarea.\n     */\n    optClass: PropTypes.string,\n    /**\n     * A callback function to be called when the textarea changes.\n     */\n    changeCallback: PropTypes.func,\n    /**\n     * A callback function to be called when the textarea is focused.\n     */\n    focusCallback: PropTypes.func,\n    /**\n     * A callback function to be called when the textarea is blurred.\n     */\n    blurCallback: PropTypes.func,\n    /**\n     * An attribute will add an explicit height (in pixels) to the textarea.\n     */\n    height: PropTypes.string\n  }\n\n  UNSAFE_componentWillReceiveProps = nextProps => {\n    if (nextProps.value !== this.props.value) {\n      this.setState({ value: nextProps.value })\n    }\n  }\n\n  handleChange = event => {\n    event.persist()\n\n    this.setState({value: event.target.value}, () => {\n      if (typeof this.props.changeCallback === 'function') {\n        this.props.changeCallback({\n          target: {\n            name: this.props.name,\n            value: event.target.value\n          }\n        })\n      }\n    })\n  }\n\n  handleFocus = event => {\n    if (typeof this.props.focusCallback === 'function') {\n      this.props.focusCallback(event)\n    }\n  }\n\n  handleBlur = event => {\n    if (typeof this.props.blurCallback === 'function') {\n      this.props.blurCallback(event)\n    }\n  }\n\n  render() {\n    const { className, css, disabled, label, height, readOnly, placeholder } = this.props\n    const heightStyle = height ? { height } : null\n\n    return (\n      <StyledDiv className={className} css={css}>\n        {label && <label>{label}</label>}\n        <textarea\n          value={this.state.value}\n          onFocus={this.handleFocus}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n          disabled={disabled}\n          readOnly={readOnly}\n          placeholder={placeholder}\n          style={heightStyle}\n        />\n      </StyledDiv>\n    )\n  }\n}\n\nexport default Textarea\n","export const wrapperStyles = {\n  height: '100vh',\n  width: '100vw',\n  display: 'flex',\n  alignItems: 'center'\n}\n\nexport const textareaStyles = {\n  flex: 1,\n  height: 'calc(100% - 20px)',\n  margin: '10px',\n  textarea: {\n    height: '100%',\n    width: '100%',\n    boxSizing: 'border-box',\n    resize: 'none'\n  }\n}\n\nexport const buttonStyles = {\n  flex: 0,\n  maxHeight: '50px',\n  minWidth: '100px'\n}\n","import cssParser from 'css';\n\n//\n// Transform implementation or originally thanks to\n// https://github.com/raphamorim/native-css\n//\n\nfunction transformRules(self, rules, result) {\n  rules.forEach(function (rule) {\n    var obj = {};\n    if (rule.type === 'media') {\n      var name = mediaNameGenerator(rule.media);\n      var media = result[name] = result[name] || {\n        \"__expression__\": rule.media\n      };\n      transformRules(self, rule.rules, media)\n    } else if (rule.type === 'rule') {\n      rule.declarations.forEach(function (declaration) {\n        if (declaration.type === 'declaration') {\n          var cleanProperty = cleanPropertyName(declaration.property);\n          obj[cleanProperty] = declaration.value;\n        }\n      });\n      rule.selectors.forEach(function (selector) {\n        var name = nameGenerator(selector.trim());\n        result[name] = obj;\n      });\n    }\n  });\n}\n\nvar cleanPropertyName = function (name) {\n\n  // turn things like 'align-items' into 'alignItems'\n  name = name.replace(/(-.)/g, function (v) {\n    return v[1].toUpperCase();\n  })\n\n  return name;\n}\n\nvar mediaNameGenerator = function (name) {\n  return '@media ' + name;\n};\n\nvar nameGenerator = function (name) {\n  name = name.replace(/\\s\\s+/g, ' ');\n  name = name.replace(/[^a-zA-Z0-9]/g, '_');\n  name = name.replace(/^_+/g, '');\n  name = name.replace(/_+$/g, '');\n\n  return name;\n};\n\nfunction transform(inputCssText) {\n\n  if (!inputCssText) {\n    throw new Error('missing css text to transform');\n  }\n\n  // If the input \"css\" doesn't wrap it with a css class (raw styles)\n  // we need to wrap it with a style so the css parser doesn't choke.\n  var bootstrapWithCssClass = false;\n  if (inputCssText.indexOf(\"{\") === -1) {\n    bootstrapWithCssClass = true;\n    inputCssText = `.bootstrapWithCssClass { ${inputCssText} }`;\n  }\n\n  var css = cssParser.parse(inputCssText);\n  var result = {};\n  transformRules(this, css.stylesheet.rules, result);\n\n  // Don't expose the implementation detail of our wrapped css class.\n  if (bootstrapWithCssClass) {\n    result = result.bootstrapWithCssClass;\n  }\n\n  return result;\n}\n\nexport default transform\n","import React, { Component } from 'react'\nimport Button from './Button'\nimport Textarea from './Textarea'\nimport StyledDiv from './StyledDiv'\nimport { buttonStyles, textareaStyles, wrapperStyles } from '../styles/index.css'\nimport transform from '../helpers/transform'\n\nexport class Transformer extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  state = {\n    scss: '',\n    styles: ''\n  }\n\n  handleChanges = event => {\n    this.setState({ scss: event.target.value })\n  }\n\n  transformStyles = () => {\n    const ugly = transform(this.state.scss)\n    let pretty = JSON.stringify(ugly, undefined, 2).replace(/\"/gm, '\\'').replace(/'(.*)':/gm, '$1:').replace(/'([0-9]+|\\$.*)'/gm, '$1')\n\n    pretty = pretty.replace(/: '(.*\\$[a-zA-Z0-9\\-]*.*)'/gm, (match, m1) => {\n      return `: \\`${m1}\\``.replace(/\\$([a-zA-Z0-9\\-]*)/gm, (match, m1) => {\n        console.log(match)\n        return `\\${${match}}`\n      })\n    })\n\n    pretty = pretty.replace(/\\$([^{][a-zA-Z0-9\\-]*)/gm, (match, m1) => {\n      return `colors.${m1.replace('-', '_')}`\n    })\n\n    this.setState({ styles: pretty })\n  }\n\n  render = () => (\n    <StyledDiv css={wrapperStyles}>\n      <Textarea css={textareaStyles} changeCallback={this.handleChanges}></Textarea>\n      <Button css={buttonStyles} onClick={this.transformStyles}>Convert</Button>\n      <Textarea css={textareaStyles} readOnly={true} value={this.state.styles}></Textarea>\n    </StyledDiv>\n  )\n}\n\nexport default Transformer\n","import React from 'react'\nimport './App.css'\nimport Transformer from './components/Transformer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Transformer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}